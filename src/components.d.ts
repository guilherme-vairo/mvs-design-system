/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface MvsAbout {
    'aboutTitle': any;
    'text': any;
  }
  interface MvsAnchor {
    'href': string;
  }
  interface MvsBase {}
  interface MvsBg {}
  interface MvsButton {
    /**
    * Caso `true`, desabilita o botão.
    */
    'disabled': boolean;
    /**
    * Caso `true`, botão terá largura 100%.
    */
    'full': boolean;
    /**
    * Caso `true`, botão terá tema light/night mode.
    */
    'light': boolean;
    /**
    * Define o tipo do botão.
    */
    'type': 'button' | 'submit' | 'reset';
    /**
    * Define estilo do botão.
    */
    'variant': 'flat' | 'ghost' | 'contained';
  }
  interface MvsCard {
    'alt': string;
    'button': string;
    'cardtitle': string;
    'link': string;
    'media': string;
    'overline': any;
    'subtitle': string;
    'text': string;
    'width': number;
  }
  interface MvsCardList {
    'data': { overline: string; title: string; subtitle: string; text: string; button: string; link: string; }[];
  }
  interface MvsCountdown {
    'deadline': string;
    'endMessage': string;
    'hours': number;
    'minutes': number;
    'seconds': number;
    'spanProcent': any;
  }
  interface MvsDivider {}
  interface MvsFigure {
    'alt': string;
    'src': string;
  }
  interface MvsFigureCaption {
    'alt': string;
    'bold': boolean;
    'boldspotlight': boolean;
    'boldtext': boolean;
    'italic': boolean;
    'italicspotlight': boolean;
    'italictext': boolean;
    'src': string;
  }
  interface MvsFlexgrid {
    /**
    * Altera visualização de flex para block.
    */
    'block': boolean;
    /**
    * Caso `true`, o componente se comportará como `container` capaz de receber `items`.
    */
    'container': boolean;
    /**
    * Caso `true`, o componente se comportará como `item`, contido em um `container`.
    */
    'item': boolean;
    /**
    * Largura do componente no breakpoint Large, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'lg': true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Largura do componente no breakpoint Medium, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'md': true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Largura do componente no breakpoint Small, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'sm': true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Define espaçamento entre componentes do tipo `item`. Usando somente em componentes tipo `container`.
    */
    'spacing': string;
    /**
    * Largura do componente no breakpoint Extra Large, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'xl': true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
  }
  interface MvsHero {
    'background': string;
    'bgimg': string;
    'button': string;
    'herotitle': string;
  }
  interface MvsIconbutton {
    'disabled': boolean;
    'type': string;
  }
  interface MvsMark {}
  interface MvsMobButton {
    'open': boolean;
  }
  interface MvsMobDrawer {
    'open': boolean;
  }
  interface MvsNavbar {
    'color': 'inherit' | 'primary' | 'secondary' | 'default';
    'lastScrollY': number;
    'links': { name: string; url: string }[];
    'logo': string;
    'open': boolean;
    'position': 'fixed' | 'sticky' | 'absolute' | 'static' | 'relative';
    'setClass': string;
  }
  interface MvsNavbutton {
    'color': 'primary' | 'white' | 'black';
    'disabled': boolean;
    'type': string;
  }
  interface MvsOverline {}
  interface MvsParagraph {
    /**
    * Altera o parágrafo para tamanho reduzido (body 2).
    */
    'bodytwo': boolean;
    /**
    * Ativa ou desativa estilização de capitular.
    */
    'capitular': boolean;
  }
  interface MvsPre {}
  interface MvsShape {
    'bg': | 'primary'
    | 'secondary'
    | 'black'
    | 'dark'
    | 'medium'
    | 'light'
    | 'white'
    | 'error'
    | 'warning'
    | 'confirm';
  }
  interface MvsStrong {}
  interface MvsSubtitle {
    'type': 'one' | 'two';
  }
  interface MvsTitle {
    /**
    * Define estilo de título a ser usado pelo componente.
    */
    'level': true | false | 't1' | 't2' | 't3' | 't4' | 't5' | 't6';
    /**
    * Sobreescreve o tag html definido automaticamente.
    */
    'override': true | false | 1 | 2 | 3 | 4 | 5 | 6;
    /**
    * Propriedade interna que define automaticamente a tag H a ser usada.
    */
    'rank': number;
    /**
    * Define texto de cor branca, para fundos escuros.
    */
    'white': boolean;
  }
  interface MvsTooltip {
    /**
    * Define conteúdo do tooltip.
    */
    'label': string;
    /**
    * Define largura do tooltip.
    */
    'length': string;
  }
}

declare global {


  interface HTMLMvsAboutElement extends Components.MvsAbout, HTMLStencilElement {}
  var HTMLMvsAboutElement: {
    prototype: HTMLMvsAboutElement;
    new (): HTMLMvsAboutElement;
  };

  interface HTMLMvsAnchorElement extends Components.MvsAnchor, HTMLStencilElement {}
  var HTMLMvsAnchorElement: {
    prototype: HTMLMvsAnchorElement;
    new (): HTMLMvsAnchorElement;
  };

  interface HTMLMvsBaseElement extends Components.MvsBase, HTMLStencilElement {}
  var HTMLMvsBaseElement: {
    prototype: HTMLMvsBaseElement;
    new (): HTMLMvsBaseElement;
  };

  interface HTMLMvsBgElement extends Components.MvsBg, HTMLStencilElement {}
  var HTMLMvsBgElement: {
    prototype: HTMLMvsBgElement;
    new (): HTMLMvsBgElement;
  };

  interface HTMLMvsButtonElement extends Components.MvsButton, HTMLStencilElement {}
  var HTMLMvsButtonElement: {
    prototype: HTMLMvsButtonElement;
    new (): HTMLMvsButtonElement;
  };

  interface HTMLMvsCardElement extends Components.MvsCard, HTMLStencilElement {}
  var HTMLMvsCardElement: {
    prototype: HTMLMvsCardElement;
    new (): HTMLMvsCardElement;
  };

  interface HTMLMvsCardListElement extends Components.MvsCardList, HTMLStencilElement {}
  var HTMLMvsCardListElement: {
    prototype: HTMLMvsCardListElement;
    new (): HTMLMvsCardListElement;
  };

  interface HTMLMvsCountdownElement extends Components.MvsCountdown, HTMLStencilElement {}
  var HTMLMvsCountdownElement: {
    prototype: HTMLMvsCountdownElement;
    new (): HTMLMvsCountdownElement;
  };

  interface HTMLMvsDividerElement extends Components.MvsDivider, HTMLStencilElement {}
  var HTMLMvsDividerElement: {
    prototype: HTMLMvsDividerElement;
    new (): HTMLMvsDividerElement;
  };

  interface HTMLMvsFigureElement extends Components.MvsFigure, HTMLStencilElement {}
  var HTMLMvsFigureElement: {
    prototype: HTMLMvsFigureElement;
    new (): HTMLMvsFigureElement;
  };

  interface HTMLMvsFigureCaptionElement extends Components.MvsFigureCaption, HTMLStencilElement {}
  var HTMLMvsFigureCaptionElement: {
    prototype: HTMLMvsFigureCaptionElement;
    new (): HTMLMvsFigureCaptionElement;
  };

  interface HTMLMvsFlexgridElement extends Components.MvsFlexgrid, HTMLStencilElement {}
  var HTMLMvsFlexgridElement: {
    prototype: HTMLMvsFlexgridElement;
    new (): HTMLMvsFlexgridElement;
  };

  interface HTMLMvsHeroElement extends Components.MvsHero, HTMLStencilElement {}
  var HTMLMvsHeroElement: {
    prototype: HTMLMvsHeroElement;
    new (): HTMLMvsHeroElement;
  };

  interface HTMLMvsIconbuttonElement extends Components.MvsIconbutton, HTMLStencilElement {}
  var HTMLMvsIconbuttonElement: {
    prototype: HTMLMvsIconbuttonElement;
    new (): HTMLMvsIconbuttonElement;
  };

  interface HTMLMvsMarkElement extends Components.MvsMark, HTMLStencilElement {}
  var HTMLMvsMarkElement: {
    prototype: HTMLMvsMarkElement;
    new (): HTMLMvsMarkElement;
  };

  interface HTMLMvsMobButtonElement extends Components.MvsMobButton, HTMLStencilElement {}
  var HTMLMvsMobButtonElement: {
    prototype: HTMLMvsMobButtonElement;
    new (): HTMLMvsMobButtonElement;
  };

  interface HTMLMvsMobDrawerElement extends Components.MvsMobDrawer, HTMLStencilElement {}
  var HTMLMvsMobDrawerElement: {
    prototype: HTMLMvsMobDrawerElement;
    new (): HTMLMvsMobDrawerElement;
  };

  interface HTMLMvsNavbarElement extends Components.MvsNavbar, HTMLStencilElement {}
  var HTMLMvsNavbarElement: {
    prototype: HTMLMvsNavbarElement;
    new (): HTMLMvsNavbarElement;
  };

  interface HTMLMvsNavbuttonElement extends Components.MvsNavbutton, HTMLStencilElement {}
  var HTMLMvsNavbuttonElement: {
    prototype: HTMLMvsNavbuttonElement;
    new (): HTMLMvsNavbuttonElement;
  };

  interface HTMLMvsOverlineElement extends Components.MvsOverline, HTMLStencilElement {}
  var HTMLMvsOverlineElement: {
    prototype: HTMLMvsOverlineElement;
    new (): HTMLMvsOverlineElement;
  };

  interface HTMLMvsParagraphElement extends Components.MvsParagraph, HTMLStencilElement {}
  var HTMLMvsParagraphElement: {
    prototype: HTMLMvsParagraphElement;
    new (): HTMLMvsParagraphElement;
  };

  interface HTMLMvsPreElement extends Components.MvsPre, HTMLStencilElement {}
  var HTMLMvsPreElement: {
    prototype: HTMLMvsPreElement;
    new (): HTMLMvsPreElement;
  };

  interface HTMLMvsShapeElement extends Components.MvsShape, HTMLStencilElement {}
  var HTMLMvsShapeElement: {
    prototype: HTMLMvsShapeElement;
    new (): HTMLMvsShapeElement;
  };

  interface HTMLMvsStrongElement extends Components.MvsStrong, HTMLStencilElement {}
  var HTMLMvsStrongElement: {
    prototype: HTMLMvsStrongElement;
    new (): HTMLMvsStrongElement;
  };

  interface HTMLMvsSubtitleElement extends Components.MvsSubtitle, HTMLStencilElement {}
  var HTMLMvsSubtitleElement: {
    prototype: HTMLMvsSubtitleElement;
    new (): HTMLMvsSubtitleElement;
  };

  interface HTMLMvsTitleElement extends Components.MvsTitle, HTMLStencilElement {}
  var HTMLMvsTitleElement: {
    prototype: HTMLMvsTitleElement;
    new (): HTMLMvsTitleElement;
  };

  interface HTMLMvsTooltipElement extends Components.MvsTooltip, HTMLStencilElement {}
  var HTMLMvsTooltipElement: {
    prototype: HTMLMvsTooltipElement;
    new (): HTMLMvsTooltipElement;
  };
  interface HTMLElementTagNameMap {
    'mvs-about': HTMLMvsAboutElement;
    'mvs-anchor': HTMLMvsAnchorElement;
    'mvs-base': HTMLMvsBaseElement;
    'mvs-bg': HTMLMvsBgElement;
    'mvs-button': HTMLMvsButtonElement;
    'mvs-card': HTMLMvsCardElement;
    'mvs-card-list': HTMLMvsCardListElement;
    'mvs-countdown': HTMLMvsCountdownElement;
    'mvs-divider': HTMLMvsDividerElement;
    'mvs-figure': HTMLMvsFigureElement;
    'mvs-figure-caption': HTMLMvsFigureCaptionElement;
    'mvs-flexgrid': HTMLMvsFlexgridElement;
    'mvs-hero': HTMLMvsHeroElement;
    'mvs-iconbutton': HTMLMvsIconbuttonElement;
    'mvs-mark': HTMLMvsMarkElement;
    'mvs-mob-button': HTMLMvsMobButtonElement;
    'mvs-mob-drawer': HTMLMvsMobDrawerElement;
    'mvs-navbar': HTMLMvsNavbarElement;
    'mvs-navbutton': HTMLMvsNavbuttonElement;
    'mvs-overline': HTMLMvsOverlineElement;
    'mvs-paragraph': HTMLMvsParagraphElement;
    'mvs-pre': HTMLMvsPreElement;
    'mvs-shape': HTMLMvsShapeElement;
    'mvs-strong': HTMLMvsStrongElement;
    'mvs-subtitle': HTMLMvsSubtitleElement;
    'mvs-title': HTMLMvsTitleElement;
    'mvs-tooltip': HTMLMvsTooltipElement;
  }
}

declare namespace LocalJSX {
  interface MvsAbout extends JSXBase.HTMLAttributes<HTMLMvsAboutElement> {
    'aboutTitle'?: any;
    'text'?: any;
  }
  interface MvsAnchor extends JSXBase.HTMLAttributes<HTMLMvsAnchorElement> {
    'href'?: string;
  }
  interface MvsBase extends JSXBase.HTMLAttributes<HTMLMvsBaseElement> {}
  interface MvsBg extends JSXBase.HTMLAttributes<HTMLMvsBgElement> {}
  interface MvsButton extends JSXBase.HTMLAttributes<HTMLMvsButtonElement> {
    /**
    * Caso `true`, desabilita o botão.
    */
    'disabled'?: boolean;
    /**
    * Caso `true`, botão terá largura 100%.
    */
    'full'?: boolean;
    /**
    * Caso `true`, botão terá tema light/night mode.
    */
    'light'?: boolean;
    /**
    * Define o tipo do botão.
    */
    'type'?: 'button' | 'submit' | 'reset';
    /**
    * Define estilo do botão.
    */
    'variant'?: 'flat' | 'ghost' | 'contained';
  }
  interface MvsCard extends JSXBase.HTMLAttributes<HTMLMvsCardElement> {
    'alt'?: string;
    'button'?: string;
    'cardtitle'?: string;
    'link'?: string;
    'media'?: string;
    'overline'?: any;
    'subtitle'?: string;
    'text'?: string;
    'width'?: number;
  }
  interface MvsCardList extends JSXBase.HTMLAttributes<HTMLMvsCardListElement> {
    'data'?: { overline: string; title: string; subtitle: string; text: string; button: string; link: string; }[];
  }
  interface MvsCountdown extends JSXBase.HTMLAttributes<HTMLMvsCountdownElement> {
    'deadline'?: string;
    'endMessage'?: string;
    'hours'?: number;
    'minutes'?: number;
    'seconds'?: number;
    'spanProcent'?: any;
  }
  interface MvsDivider extends JSXBase.HTMLAttributes<HTMLMvsDividerElement> {}
  interface MvsFigure extends JSXBase.HTMLAttributes<HTMLMvsFigureElement> {
    'alt'?: string;
    'src'?: string;
  }
  interface MvsFigureCaption extends JSXBase.HTMLAttributes<HTMLMvsFigureCaptionElement> {
    'alt'?: string;
    'bold'?: boolean;
    'boldspotlight'?: boolean;
    'boldtext'?: boolean;
    'italic'?: boolean;
    'italicspotlight'?: boolean;
    'italictext'?: boolean;
    'src'?: string;
  }
  interface MvsFlexgrid extends JSXBase.HTMLAttributes<HTMLMvsFlexgridElement> {
    /**
    * Altera visualização de flex para block.
    */
    'block'?: boolean;
    /**
    * Caso `true`, o componente se comportará como `container` capaz de receber `items`.
    */
    'container'?: boolean;
    /**
    * Caso `true`, o componente se comportará como `item`, contido em um `container`.
    */
    'item'?: boolean;
    /**
    * Largura do componente no breakpoint Large, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'lg'?: true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Largura do componente no breakpoint Medium, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'md'?: true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Largura do componente no breakpoint Small, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'sm'?: true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    /**
    * Define espaçamento entre componentes do tipo `item`. Usando somente em componentes tipo `container`.
    */
    'spacing'?: string;
    /**
    * Largura do componente no breakpoint Extra Large, entre 1 e 12. Quando omitido, ocupa o espaço restante automaticamente.
    */
    'xl'?: true | false | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
  }
  interface MvsHero extends JSXBase.HTMLAttributes<HTMLMvsHeroElement> {
    'background'?: string;
    'bgimg'?: string;
    'button'?: string;
    'herotitle'?: string;
  }
  interface MvsIconbutton extends JSXBase.HTMLAttributes<HTMLMvsIconbuttonElement> {
    'disabled'?: boolean;
    'type'?: string;
  }
  interface MvsMark extends JSXBase.HTMLAttributes<HTMLMvsMarkElement> {}
  interface MvsMobButton extends JSXBase.HTMLAttributes<HTMLMvsMobButtonElement> {
    'open'?: boolean;
  }
  interface MvsMobDrawer extends JSXBase.HTMLAttributes<HTMLMvsMobDrawerElement> {
    'open'?: boolean;
  }
  interface MvsNavbar extends JSXBase.HTMLAttributes<HTMLMvsNavbarElement> {
    'color'?: 'inherit' | 'primary' | 'secondary' | 'default';
    'lastScrollY'?: number;
    'links'?: { name: string; url: string }[];
    'logo'?: string;
    'open'?: boolean;
    'position'?: 'fixed' | 'sticky' | 'absolute' | 'static' | 'relative';
    'setClass'?: string;
  }
  interface MvsNavbutton extends JSXBase.HTMLAttributes<HTMLMvsNavbuttonElement> {
    'color'?: 'primary' | 'white' | 'black';
    'disabled'?: boolean;
    'type'?: string;
  }
  interface MvsOverline extends JSXBase.HTMLAttributes<HTMLMvsOverlineElement> {}
  interface MvsParagraph extends JSXBase.HTMLAttributes<HTMLMvsParagraphElement> {
    /**
    * Altera o parágrafo para tamanho reduzido (body 2).
    */
    'bodytwo'?: boolean;
    /**
    * Ativa ou desativa estilização de capitular.
    */
    'capitular'?: boolean;
  }
  interface MvsPre extends JSXBase.HTMLAttributes<HTMLMvsPreElement> {}
  interface MvsShape extends JSXBase.HTMLAttributes<HTMLMvsShapeElement> {
    'bg'?: | 'primary'
    | 'secondary'
    | 'black'
    | 'dark'
    | 'medium'
    | 'light'
    | 'white'
    | 'error'
    | 'warning'
    | 'confirm';
  }
  interface MvsStrong extends JSXBase.HTMLAttributes<HTMLMvsStrongElement> {}
  interface MvsSubtitle extends JSXBase.HTMLAttributes<HTMLMvsSubtitleElement> {
    'type'?: 'one' | 'two';
  }
  interface MvsTitle extends JSXBase.HTMLAttributes<HTMLMvsTitleElement> {
    /**
    * Define estilo de título a ser usado pelo componente.
    */
    'level'?: true | false | 't1' | 't2' | 't3' | 't4' | 't5' | 't6';
    /**
    * Sobreescreve o tag html definido automaticamente.
    */
    'override'?: true | false | 1 | 2 | 3 | 4 | 5 | 6;
    /**
    * Propriedade interna que define automaticamente a tag H a ser usada.
    */
    'rank'?: number;
    /**
    * Define texto de cor branca, para fundos escuros.
    */
    'white'?: boolean;
  }
  interface MvsTooltip extends JSXBase.HTMLAttributes<HTMLMvsTooltipElement> {
    /**
    * Define conteúdo do tooltip.
    */
    'label'?: string;
    /**
    * Define largura do tooltip.
    */
    'length'?: string;
  }

  interface IntrinsicElements {
    'mvs-about': MvsAbout;
    'mvs-anchor': MvsAnchor;
    'mvs-base': MvsBase;
    'mvs-bg': MvsBg;
    'mvs-button': MvsButton;
    'mvs-card': MvsCard;
    'mvs-card-list': MvsCardList;
    'mvs-countdown': MvsCountdown;
    'mvs-divider': MvsDivider;
    'mvs-figure': MvsFigure;
    'mvs-figure-caption': MvsFigureCaption;
    'mvs-flexgrid': MvsFlexgrid;
    'mvs-hero': MvsHero;
    'mvs-iconbutton': MvsIconbutton;
    'mvs-mark': MvsMark;
    'mvs-mob-button': MvsMobButton;
    'mvs-mob-drawer': MvsMobDrawer;
    'mvs-navbar': MvsNavbar;
    'mvs-navbutton': MvsNavbutton;
    'mvs-overline': MvsOverline;
    'mvs-paragraph': MvsParagraph;
    'mvs-pre': MvsPre;
    'mvs-shape': MvsShape;
    'mvs-strong': MvsStrong;
    'mvs-subtitle': MvsSubtitle;
    'mvs-title': MvsTitle;
    'mvs-tooltip': MvsTooltip;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


